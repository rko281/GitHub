| package |
package := Package name: 'GitHub Packages'.
package paxVersion: 1;
	basicComment: 'GitHub Packages
 - Download and install Dolphin Smalltalk Packages and their prerequisites directly from GitHub
 - Simplifies the loading of complex frameworks

To download and install a package from GitHub evaluate:

GitHubPackageManager install: ''<github username>/<repository name>/<package path>''

Example:

GitHubPackageManager install: ''rko281/MethodSpies/Method Spies''

Package name can be omitted where it matches the repository name:

GitHubPackageManager install: ''rko281/MethodSpies''

Any required prerequisite packages will also be downloaded (this includes prerequisites from other repositories where these can be located)


PLEASE BE AWARE YOUR GITHUB USERNAME AND A REQUESTED AUTHORIZATION TOKEN WILL BE STORED IN THE IMAGE AND (OPTIONALLY) THE REGISTRY.
Please ensure you understand the security implications of storing this information before using this package.


John Aspinall 2018'.


package classNames
	add: #GitHubPackage;
	add: #GitHubPackageManager;
	yourself.

package methodNames
	add: #GitHubBranch -> #allChildPackages;
	add: #GitHubBranch -> #bestMatchForPackage:;
	add: #GitHubBranch -> #hasPackageDirectory;
	add: #GitHubBranch -> #packageManager;
	add: #GitHubBranch -> #packageRootPath;
	add: #GitHubBranch -> #packageWithPath:ifNone:;
	add: #GitHubBranch -> #packageWithPathname:ifNone:;
	add: #GitHubCredentials -> #authenticateWithUser;
	add: #GitHubRepository -> #allChildPackages;
	add: #GitHubRepository -> #bestMatchForPackage:;
	add: #GitHubRepository -> #isDolphinCore;
	add: #GitHubTreeItem -> #allChildPackages;
	add: #GitHubTreeItem -> #gitHubPackage;
	add: #GitHubTreeItem -> #isPacFile;
	add: #GitHubTreeItem -> #isPackageFile;
	add: #GitHubTreeItem -> #isPaxFile;
	add: #GitHubTreeItem -> #isSmalltalkFile;
	add: #GitHubTreeItem -> #packageManager;
	add: #GitHubTreeItem -> #packagePathname;
	add: #GitHubTreeItem -> #rootPath;
	add: #String -> #withPackagePathDelimiters;
	add: 'GitHubAPI class' -> #newAuthenticated;
	add: 'GitHubCredentials class' -> #clearStoredCredentials;
	add: 'GitHubCredentials class' -> #credentialsKey;
	add: 'GitHubCredentials class' -> #storeCredentials:;
	add: 'GitHubCredentials class' -> #storedCredentialsIfPresent:;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	yourself).

package setPrerequisites: (IdentitySet new
	add: '..\Core\Object Arts\Dolphin\Base\Dolphin';
	add: '..\Core\Object Arts\Dolphin\MVP\Dialogs\Progress\Dolphin Progress Dialog';
	add: '..\Core\Object Arts\Dolphin\MVP\Presenters\Prompters\Dolphin Prompter';
	add: '..\Core\Object Arts\Dolphin\Registry\Dolphin Registry Access';
	add: '..\Core\Object Arts\Dolphin\MVP\Presenters\Text\Dolphin Text Presenter';
	add: 'GitHub Client';
	add: 'Shadow Packages';
	yourself).

package!

"Class Definitions"!

ShadowPackage subclass: #GitHubPackage
	instanceVariableNames: 'gitHubItem gitHubContents branch'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ShadowPackageManager subclass: #GitHubPackageManager
	instanceVariableNames: 'branch'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: 'registry'!

"Global Aliases"!


"Loose Methods"!

!GitHubAPI class methodsFor!

newAuthenticated

	"Return a new, authenticated, instance of the receiver, or nil if no cached authetnication and user declines to authenticate.
	Error if authentication fails"

	| api |

	api := self new.
	(api credentials isComplete or: [api credentials authenticateWithUser]) ifFalse: [^nil].

	api canAuthenticate ifFalse: [self error: 'Authentication failed - evaluate "GitHubCredentials default authenticateWithUser" to renew authentication'].

	^api! !
!GitHubAPI class categoriesFor: #newAuthenticated!instance creation!public! !

!GitHubBranch methodsFor!

allChildPackages

	^self treeRoots inject: SortedCollection new into: [ :all :each | each isDirectory ifTrue: [all addAll: each allChildPackages] ifFalse: [each isPackageFile ifTrue: [all add: each gitHubPackage]]. all]!

bestMatchForPackage: aGitHubPackage

	^self packageWithPathname: aGitHubPackage packagePathname ifNone: [nil]!

hasPackageDirectory

	"There are two supported ways for package items (code) to be stored in the repository:
	1) code items are stored beginning in root of repository
	2) code items are stored beginning in a directory with the same name as the repository (there are no other code items or code-containing directories in root of repository)
	Option 1 is simple for small repositories
	Option 2 is useful to avoid the GitHub repository page being a huge list of package and associated files, obscuring the readme at the bottom.

	In the case of option 1 we locate packages in <working directory>/<repository name>/<code item path>
	In the case of option 2 we locate packages in <working directory>/<code item path>, i.e. we do not duplicate the repository name

	Answer true in the case of option 2, or false in the case of option 1"

	"Additional special case - the Dolphin home repository stores all packages in its Core directory. We treat this like option 2, i.e. do not prefix package path with repository name"
	^self repository isDolphinCore or: 
		[(self treeItems anySatisfy: [ :each | each isDirectory and: [each name = self repository name]]) and: 
			[self treeItems allSatisfy: [ :each | each rootPath = self repository name or: [each isSmalltalkFile not]]]]!

packageManager

	^GitHubPackageManager forBranch: self!

packageRootPath

	"Private - Answer the root path (relative to the working directory) for the receiver's packages. 
	Normally this is the repository name, however if this branch has its own package directory this is already present in our items' own paths"

	^self hasPackageDirectory
		ifTrue: ['']
		ifFalse: [self repository name]!

packageWithPath: aString ifNone: aBlock

	"aString is a github path within this branch. 
	Convert to and search via a package pathname to take path mangling into account"

	| packagePathname |

	packagePathname := (File composePath: self repository name subPath: aString) withPackagePathDelimiters.

	^self packageWithPathname: packagePathname ifNone: aBlock!

packageWithPathname: aString ifNone: aBlock

	"Private - Ignore extension when searching; we automatically favour .pax over .pac so will always use the former if present"

	| withoutExtension |

	withoutExtension := File removeExtension: aString.

	^self allChildPackages detect: [ :each | (File removeExtension: each packagePathname) = withoutExtension] ifNone: aBlock! !
!GitHubBranch categoriesFor: #allChildPackages!accessing!public! !
!GitHubBranch categoriesFor: #bestMatchForPackage:!accessing!public! !
!GitHubBranch categoriesFor: #hasPackageDirectory!public!testing! !
!GitHubBranch categoriesFor: #packageManager!accessing!private! !
!GitHubBranch categoriesFor: #packageRootPath!accessing!private! !
!GitHubBranch categoriesFor: #packageWithPath:ifNone:!accessing!public! !
!GitHubBranch categoriesFor: #packageWithPathname:ifNone:!accessing!private! !

!GitHubCredentials methodsFor!

authenticateWithUser

	| username passwordPrompter password description |

	##(self) storedCredentialsIfPresent: 
		[ :storedCryptUsername :storedCryptToken |
		(MessageBox confirm: 'Use stored GitHub authorization credentials?' caption: 'GitHub Client') ifTrue: 
			[self
				encryptedUsername: storedCryptUsername;
				encryptedToken: storedCryptToken.
			^true]].

	(MessageBox confirm: 'You will be prompted to enter your GitHub username and password. These are used to request an Authorization token from your GitHub account.<N><N>YOUR USERNAME AND THE AUTHORIZATION TOKEN WILL BE STORED IN THIS IMAGE<N><N>Proceed?' expandMacros caption: 'GitHubPackageManager') ifFalse: [^false].
	username := Prompter prompt: 'Enter your GitHub username' caption: 'GitHub Client'.
	(username ifNil: ['']) isEmpty ifTrue: [^false].

	passwordPrompter := Prompter createOn: '' prompt: 'Enter your GitHub password' caption: 'GitHub Client'.
	passwordPrompter view allSubViewsDo: [ :v | (v isKindOf: TextEdit) ifTrue: [v isPassword: true; setFocus]].
	password := passwordPrompter showModal.
	(password ifNil: ['']) isEmpty ifTrue: [^false].

	description := Prompter on: 'Dolphin GitHub Client' prompt: 'Enter a description for this token' caption: 'GitHub Client'.
	(description ifNil: ['']) isEmpty ifTrue: [^false].

	self
		username: username;
		authorizeWithPassword: password description: description.

	(MessageBox confirm: 'Authorization successful.<N><N>Store the username and token in the registry for use by other images?<N><N>NB: THESE DETAILS WILL ALSO BE VISIBLE TO OTHER APPLICATIONS' expandMacros caption: 'GitHub Client') ifTrue: [##(self) storeCredentials: self].

	^true! !
!GitHubCredentials categoriesFor: #authenticateWithUser!operations!public! !

!GitHubCredentials class methodsFor!

clearStoredCredentials

	self storeCredentials: nil!

credentialsKey 

	^'Software\Dolphin\GitHub Client\Credentials'!

storeCredentials: aGitHubCredentials

	aGitHubCredentials isNil ifTrue: [^(RegKey userRoot createKey: (File splitPathFrom: self credentialsKey)) removeKey: (File splitStemFrom: self credentialsKey)].

	(RegKey userRoot createKey: self credentialsKey) subValues 
		at: 'Username' put: aGitHubCredentials encryptedUsername;
		at: 'Token' put: aGitHubCredentials encryptedToken!

storedCredentialsIfPresent: aBlock

	RegKey userRoot at: self credentialsKey ifPresent: [ :value | aBlock value: (value subValues at: 'Username') value: (value subValues at: 'Token')]! !
!GitHubCredentials class categoriesFor: #clearStoredCredentials!public!utilities! !
!GitHubCredentials class categoriesFor: #credentialsKey!constants!private! !
!GitHubCredentials class categoriesFor: #storeCredentials:!private!utilities! !
!GitHubCredentials class categoriesFor: #storedCredentialsIfPresent:!private!utilities! !

!GitHubRepository methodsFor!

allChildPackages

	"Consider default branch only" 

	^self defaultBranch allChildPackages!

bestMatchForPackage: aGitHubPackage

	"If we are looking for a package not in a default branch, first check for a correspondingly-named branch here"
	aGitHubPackage branch isDefaultBranch ifFalse: 
		[(self branches detect: [ :branch | branch name = aGitHubPackage branch name] ifNone: [nil]) ifNotNil: 
			[ :branch | (branch bestMatchForPackage: aGitHubPackage) ifNotNil: [ :pkg | ^pkg]]].

	"Now just check the default branch"
	^self defaultBranch bestMatchForPackage: aGitHubPackage!

isDolphinCore

	^self name = 'Dolphin'! !
!GitHubRepository categoriesFor: #allChildPackages!accessing!public! !
!GitHubRepository categoriesFor: #bestMatchForPackage:!accessing!public! !
!GitHubRepository categoriesFor: #isDolphinCore!public!testing! !

!GitHubTreeItem methodsFor!

allChildPackages

	| allChildPackages |

	allChildPackages := SortedCollection new.

	self children do:
		[ :each |
		each isPackageFile ifTrue: [allChildPackages add: each gitHubPackage].
		each hasChildren ifTrue: [allChildPackages addAll: each allChildPackages]].

	^allChildPackages!

gitHubPackage

	^self packageManager packageForItem: self!

isPacFile

	^self isFile and: [Package packageExtension match: self fileExtension]!

isPackageFile

	"If there is both .pax and .pac we should ignore the latter"
	^self isPaxFile or: [self isPacFile and: [((self parent ifNil: [self branch]) children anySatisfy: [ :each | each name = self name and: [each isPaxFile]]) not]]!

isPaxFile

	^self isFile and: [Package sourcePackageExtension match: self fileExtension]!

isSmalltalkFile

	^self isFile and: 
		[##({	'cls'. 
			Package sourcePackageExtension. 
			Package packageExtension. 
			Package sourceGlobalExtension. 
			Package binaryGlobalExtension}) includes: (File splitExtensionFrom: self path) asLowercase]!

packageManager

	^self branch packageManager!

packagePathname

	^File composePath: self branch packageRootPath subPath: self path withPackagePathDelimiters!

rootPath

	| stream root |

	stream := self path readStream.
	root := stream upTo: $/.

	"If we have hit the end of the stream there is no root path"
	^stream atEnd 
		ifTrue: ['']
		ifFalse: [root]! !
!GitHubTreeItem categoriesFor: #allChildPackages!accessing!public! !
!GitHubTreeItem categoriesFor: #gitHubPackage!accessing!public! !
!GitHubTreeItem categoriesFor: #isPacFile!public!testing! !
!GitHubTreeItem categoriesFor: #isPackageFile!public!testing! !
!GitHubTreeItem categoriesFor: #isPaxFile!public!testing! !
!GitHubTreeItem categoriesFor: #isSmalltalkFile!public!testing! !
!GitHubTreeItem categoriesFor: #packageManager!accessing!private! !
!GitHubTreeItem categoriesFor: #packagePathname!accessing!public! !
!GitHubTreeItem categoriesFor: #rootPath!accessing!private! !

!String methodsFor!

withPackagePathDelimiters

	"Replace all path delimiters with the standard platform path delimiter (i.e. back slash)"

	| in out allDelimiters pathDelimiter |

	in := self readStream.
	out := self species writeStream: self size.

	allDelimiters := File pathDelimiters.
	pathDelimiter := File pathDelimiter.

	[in atEnd] whileFalse: 
		[| next |
		next := in next.
		(allDelimiters includes: next)
			ifTrue: [out nextPut: pathDelimiter]
			ifFalse: [out nextPut: next]].

	^out contents! !
!String categoriesFor: #withPackagePathDelimiters!converting!public! !

"End of package definition"!

