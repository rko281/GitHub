| package |
package := Package name: 'GitHub Packages'.
package paxVersion: 1;
	basicComment: 'GitHub Packages
 - Download and install Dolphin Smalltalk Packages and their prerequisites directly from GitHub
 - Simplifies the loading of complex frameworks

To download and install a package from GitHub evaluate:

GitHubPackageManager install: ''<github username>/<repository name>/<package path>''

Example:

GitHubPackageManager install: ''rko281/MethodSpies/Method Spies''

Package name can be omitted where it matches the repository name:

GitHubPackageManager install: ''rko281/MethodSpies''

Any required prerequisite packages will also be downloaded (this includes prerequisites from other repositories where these can be located)

John Aspinall 2020'.


package classNames
	add: #GHIShellDispatch;
	add: #GHShell32Folder3;
	add: #GHShell32FolderItem;
	add: #GHShell32FolderItems;
	add: #GitHubBranch;
	add: #GitHubPackageManager;
	add: #GitHubRepository;
	yourself.

package methodNames
	add: #PackageManager -> #installUntrapped:;
	yourself.

package globalNames
	add: #GHShell32Constants;
	add: #GHShell32Lib;
	yourself.

package binaryGlobalNames: (Set new
	add: #GHShell32Lib;
	yourself).

package globalAliases: (Set new
	yourself).

package setPrerequisites: #(
	'..\Core\Object Arts\Dolphin\ActiveX\Automation\ActiveX Automation'
	'..\Core\Object Arts\Dolphin\Base\Dolphin'
	'..\Core\Object Arts\Dolphin\ActiveX\COM\OLE COM'
	'..\Core\Object Arts\Dolphin\ActiveX\Structured Storage\OLE Structured Storage').

package!

"Class Definitions"!

Object subclass: #GitHubBranch
	instanceVariableNames: 'repository name tempFilename packageFolder'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #GitHubPackageManager
	instanceVariableNames: 'includeMap repositories shellObject isHeadless shouldExtractEntireRootRepository extractFileExtensions'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #GitHubRepository
	instanceVariableNames: 'manager name ownerName namedBranches'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
IDispatch subclass: #GHIShellDispatch
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: 'GHShell32Constants'
	classInstanceVariableNames: ''!
IDispatch subclass: #GHShell32Folder3
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
IDispatch subclass: #GHShell32FolderItem
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: 'GHShell32Constants'
	classInstanceVariableNames: ''!
IDispatch subclass: #GHShell32FolderItems
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: 'GHShell32Constants'
	classInstanceVariableNames: ''!

"Global Aliases"!


"Loose Methods"!

!PackageManager methodsFor!

installUntrapped: aString 
	"Identical to install except missing prerequisite signals are passed through (with additional info), not masked"

	| newPackages startPackage |
	startPackage := self loadPackage: aString.
	(self includesPackageNamed: startPackage name) 
		ifTrue: [^self errorNameIsNotUnique: startPackage name].
	
	[| filename |
	filename := startPackage packageFileName.
	newPackages := self 
				loadPrereqsForPackage: startPackage
				relativeTo: startPackage path
				extension: (File splitExtensionFrom: filename)
				loaded: (PluggableSet searchPolicy: SearchPolicy caseInsensitive)
				trail: OrderedCollection new] 
			on: PackageNotFoundSignal
			do: 
				[:ex || sourceFrame |
				"Tag the exception with the base path from which the missing prereq could not be found"
				sourceFrame := ex raisingFrame sender sender.
				ex tag: (sourceFrame arguments at: (sourceFrame tempNames indexOf: 'basePathString')).
				ex pass].
	self assert: [newPackages last == startPackage].
	self beNotProcessingEvents.
	
	[newPackages do: 
			[:each | 
			self addPackage: each.
			[
				self basicInstall: each.
				self trigger: #packageInstalled: with: each.
			] ifCurtailed: [self basicUninstall: each].
			self observePackage: each]] 
			ensure: 
				[self beProcessingEvents.
				self loadedChanged].
	^newPackages! !
!PackageManager categoriesFor: #installUntrapped:!operations!public! !

"End of package definition"!

